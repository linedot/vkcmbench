#version 450 core
#pragma use_vulkan_memory_model
#extension GL_EXT_buffer_reference : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_control_flow_attributes2 : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable
#extension GL_KHR_cooperative_matrix : enable
#extension GL_KHR_memory_scope_semantics : enable

layout(local_size_x = SUBGRP_SIZE, local_size_y = 1, local_size_z = 1) in;

// finalize constants through host api calls
layout(constant_id = 0) const int M = 16;
layout(constant_id = 1) const int N = 16;
layout(constant_id = 2) const int K = 16;

layout(push_constant) uniform parameters {
    uint32_t n;
} params;

layout(buffer_reference) buffer in_a_t { A_TYPE array[]; } in_a; 
layout(buffer_reference) buffer in_b_t { B_TYPE array[]; } in_b; 
layout(buffer_reference) buffer in_c_t { C_TYPE array[]; } in_c; 

layout(set=0, std430, binding=0) uniform input_data 
{
    in_a_t a; 
    in_b_t b;
    in_c_t c;
} matrix_data;

void main()
{
    coopmat<A_TYPE, gl_ScopeSubgroup, M, K, gl_MatrixUseA> a;
    coopmat<B_TYPE, gl_ScopeSubgroup, K, N, gl_MatrixUseB> b;
    coopmat<C_TYPE, gl_ScopeSubgroup, M, N, gl_MatrixUseAccumulator> c[INST_COUNT];

    const uint id = gl_GlobalInvocationID.x/SUBGRP_SIZE;

    uint32_t a_off = id*M;
    uint32_t b_off = id*K;
    uint32_t c_off = INST_COUNT*id*M;


    //uint32_t a_off = 0;
    //uint32_t b_off = 0;
    //uint32_t c_off = 0;

    coopMatLoad(a, matrix_data.a.array, a_off, K, gl_CooperativeMatrixLayoutRowMajor);
    coopMatLoad(b, matrix_data.b.array, b_off, N, gl_CooperativeMatrixLayoutRowMajor);

    [[unroll]] for(uint j = 0; j < INST_COUNT; j++)
    {
        coopMatLoad(c[j], matrix_data.c.array, c_off+j*M, N, gl_CooperativeMatrixLayoutRowMajor);
    }

    for(uint i = 0; i < params.n; i++)
    {
        [[unroll]] for(uint k = 0; k < BLOCKS_IN_KERNEL; k++)
        {
            [[unroll]] for(uint j = 0; j < INST_COUNT; j++)
            {
                c[j] = coopMatMulAdd(a, b, c[j]);
            }
	}
    }

    [[unroll]] for(uint j = 0; j < INST_COUNT; j++)
    {
        coopMatStore(c[j], matrix_data.c.array, c_off+j*M, N, gl_CooperativeMatrixLayoutRowMajor);
    }
}
